//            AUTHOR-->>    YADAV_JI
 
#include "bits/stdc++.h"
using namespace std;
// using i64 = int64_t;
// constexpr i64 mod = 998244353;
#define int               int64_t
#define PB                push_back
#define POB              pop_back
#define PF                push_front
#define POF              pop_front
#define all(x)            (x).begin(),(x).end()
#define uniq(v)           (v).erase(unique(all(v)),(v).end())
#define sz(x)             (int)((x).size())
#define F                first
#define S                second
#define pii               pair<int,int>
#define FRi(b)          for(int i=0;i<b;i++)
#define FRj(b)          for(int j=0;j<b;j++)
#define fro(b)         for(int i=1;i<b;i++)
#define frr(b)         for(int i=b;i>=0;i--)
#define prDouble(x) cout << fixed << setprecision(10) << x
#define newline              cout<<'\n';
#define mem1(a)           memset(a,-1,sizeof(a))
#define mem0(a)           memset(a,0,sizeof(a))
#define MAXN 2000001
#define mod  998244353
 
typedef pair<int, int> pi;
int n,m;
vector<int>v;
int a,b,c,d;
int spf[MAXN]; 
void seiv() {
     for(int i= 1;i<MAXN;i++) spf[i] = i; for(int i=4;i<MAXN;i+=2) spf[i] = 2;
    for(int i= 3;i*i<=MAXN;i++) { if(spf[i] == i) { for(int j=i*i;j<MAXN;j+=i) { 
        if(spf [j] == j) spf[j] = i;
            }
         }
     }
}
vector<int>  getfactor(int x) {
    vector<int>factor; while(x != 1) { factor.push_back(spf[x]); x = x / spf[x]; } return factor;
}
int  getfactorsum(int x) {
    int sum = 0; 
    for (int i=1; i<=sqrt(x); i++) 
    { 
        if (x%i == 0) 
        { 
            // If divisors are equal, print only one 
            if (x/i == i) 
               sum += i;
  
            else // Otherwise print both 
                {sum += i;sum += x/i;}
        } 
    }
    return sum;
}
 
int N_Choose_K(int n, int k, int mode) {
        if(k == 1) return n;
        if(n-k == 1) return n;
        if(n == k) return 1;
        return (N_Choose_K(n-1,k,mode) + N_Choose_K(n-1,k-1,mode)) % mode;
    }
int binpow(int  A, int N, int M) {
    int res = 1;
    for(;N;N >>= 1) {
        if(N &1) res = (res * A) % M; A = (A * A) % M;
    }
    return res ;
}
// If the first elements are equal, then sort by second element in decreasing order.
  auto cmp1 = [](const pair<int, int>& a, const pair<int, int>& b) {
    return a.first < b.first || (a.first == b.first && a.second < b.second);
  };
// If the first elements are equal, then sort by second element in increasing order.
  auto cmp2 = [](const pair<int, int>& a, const pair<int, int>& b) {
    return a.first < b.first || (a.first == b.first && a.second > b.second);
  };
void f(vector<string>&s,int i , int j) {
    // if(i  < 0 || i >= n || j >= m || j < 0) return ;
    s[i][j] = '.';
    int row[8] = {0,0,-1,1,-1,1,-1,1};
    int col[8] = {-1,1,-1,1,0,0,1,-1};
    for(int k = 0;k < 8;k++) {
        int ii = i+row[k];
        int jj = j+col[k];
        if(ii >= 0 && ii < n && jj >= 0 && jj < m && s[ii][jj] == '#') {
            f(s,ii,jj);
        }
    }
}  

void SAKSHAM(int test){
    cin >> n >> m;
    unordered_map<int,vector<int>>mp;
    unordered_map<int,vector<int>>rev;
    vector<int>ind(n+1,0);
    FRi(m) {
        cin >> a >> b;
        mp[a].PB(b);
        ind[b]++;
        rev[b].PB(a);
    }
    queue<int>q;
    // for(int i =1;i <= n;i++) {
    //     if(ind[i] == 0) {
    //         q.push(i);
    //     }
    // }
    q.push(1);
    
    vector<int>ans(n+1,0);
    ans[1] = 1;
    while(q.size()) {
        int node = q.front();
        q.pop();
        ans.push_back(node);
        for(auto i : mp[node]) {
            // ind[i]--;
            // if(ind[i] == 0)
                q.push(i);
            ans[i] = max(ans[node] + 1 , ans[i]);
        } 
    }
    if(ans[n] == 0) {
        cout<<"IMPOSSIBLE\n";
        return ;
    }
    int x = n;
    vector<int>path;
    path.PB(n);
    while(x != 1) {
        for(auto i : rev[x]) {
            if(ans[i] == ans[x]-1) {
                x = i;
                break;
            }
        }
        path.PB(x);
    }
    reverse(all(path));
    cout<<path.size()<<endl;
    for(auto i : path) cout<<i<<" ";
     // cout<<ans[n]<<endl; 
}
 
 
signed main (){ 
    ios_base:: sync_with_stdio(false);cin.tie(0);cout.tie(0);
    //freopen( "input.txt", "r", stdin);
    //freopen( "output.txt", "w", stdout);
    // #ifdef SIEVE
    //     sieve();
    // #endif
    // #ifdef NCR 
    //     init() ;
    // #endif
    int t=1;
    // seiv();
    // cin >> t;
    FRj(t) 
        SAKSHAM(j);
     // cerr << "\n" << (double)clock() / CLOCKS_PER_SEC * 1000 << " ms";
    return 0;
}
